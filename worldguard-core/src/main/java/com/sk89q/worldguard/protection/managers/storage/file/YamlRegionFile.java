/*
 * WorldGuard, a suite of tools for Minecraft
 * Copyright (C) sk89q <http://www.sk89q.com>
 * Copyright (C) WorldGuard team and contributors
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package com.sk89q.worldguard.protection.managers.storage.file;

import com.sk89q.util.yaml.YAMLFormat;
import com.sk89q.util.yaml.YAMLNode;
import com.sk89q.util.yaml.YAMLProcessor;
import com.sk89q.worldedit.math.BlockVector2;
import com.sk89q.worldguard.domains.DefaultDomain;
import com.sk89q.worldguard.protection.flags.FlagUtil;
import com.sk89q.worldguard.protection.flags.registry.FlagRegistry;
import com.sk89q.worldguard.protection.managers.RegionDifference;
import com.sk89q.worldguard.protection.managers.storage.DifferenceSaveException;
import com.sk89q.worldguard.protection.managers.storage.RegionDatabase;
import com.sk89q.worldguard.protection.managers.storage.StorageException;
import com.sk89q.worldguard.protection.regions.*;
import org.yaml.snakeyaml.parser.ParserException;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.*;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.sk89q.worldguard.protection.managers.storage.file.YamlCommon.YAML_GLOBAL_NAMESPACE_NAME;

/**
 * A store that persists regions in a YAML-encoded file.
 */
public class YamlRegionFile implements RegionDatabase {
    private static final String FILE_HEADER = "#\r\n" +
            "# WorldGuard regions file\r\n" +
            "#\r\n" +
            "# WARNING: THIS FILE IS AUTOMATICALLY GENERATED. If you modify this file by\r\n" +
            "# hand, be aware that A SINGLE MISTYPED CHARACTER CAN CORRUPT THE FILE. If\r\n" +
            "# WorldGuard is unable to parse the file, your regions will FAIL TO LOAD and\r\n" +
            "# the contents of this file will reset. Please use a YAML validator such as\r\n" +
            "# http://yaml-online-parser.appspot.com (for smaller files).\r\n" +
            "#\r\n" +
            "# REMEMBER TO KEEP PERIODICAL BACKUPS.\r\n" +
            "#";

    private static final List<YamlReader> YAML_READERS = new ArrayList<>();

    static {
        // IMPORTANT: For best performance, add these in reverse order.
        // We always want the latest version to be attempted first, so that once migrated, we are checking
        // one version, not n.
        YAML_READERS.add(new YamlReaderVersionTwo());
        YAML_READERS.add(new YamlReaderVersionOne());
    }

    private final String name;
    private final File file;

    /**
     * Create a new instance.
     *
     * @param name the name of this store
     * @param file the file
     */
    public YamlRegionFile(String name, File file) {
        checkNotNull(name, "name");
        checkNotNull(file, "file");
        this.name = name;
        this.file = file;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public Set<ProtectedRegion> loadAll(FlagRegistry flagRegistry) throws StorageException {
        YAMLProcessor config = createYamlProcessor(file);
        try {
            config.load();
        } catch (FileNotFoundException e) {
            return new HashSet<>();
        } catch (IOException | ParserException e) {
            throw new StorageException("Failed to load region data from '" + file + "'", e);
        }

        for (YamlReader reader : YAML_READERS) {
            if (reader.canLoad(config)) {
                return reader.load(flagRegistry, config);
            }
        }

        throw new IllegalStateException("No YAML reader was registered that understands the saved region information");
    }

    @Override
    public void saveAll(Set<ProtectedRegion> regions) throws StorageException {
        checkNotNull(regions);

        File tempFile = new File(file.getParentFile(), file.getName() + ".tmp");
        YAMLProcessor config = createYamlProcessor(tempFile);

        config.clear();

        config.setProperty("version", YAML_READERS.get(0).getVersion());
        YAMLNode regionsNode = config.addNode("regions");

        // Creates a mapping of existing namespace node names, to their underlying YAMLNode.
        Map<String, YAMLNode> namespaceMap = new HashMap<>();

        for (ProtectedRegion region : regions) {
            RegionIdentifier identifier = region.getIdentifier();

            String internalNamespace = identifier.getNamespace().orElse(YAML_GLOBAL_NAMESPACE_NAME);
            YAMLNode namespaceNode = namespaceMap.compute(internalNamespace, (ignored, existingNamespaceNode) -> {
                if (existingNamespaceNode == null) {
                    existingNamespaceNode = regionsNode.addNode(internalNamespace);
                }

                return existingNamespaceNode;
            });

            YAMLNode node = namespaceNode.addNode(identifier.getName());

            if (region instanceof ProtectedCuboidRegion) {
                ProtectedCuboidRegion cuboid = (ProtectedCuboidRegion) region;
                node.setProperty("type", "cuboid");
                node.setProperty("min", cuboid.getMinimumPoint());
                node.setProperty("max", cuboid.getMaximumPoint());
            } else if (region instanceof ProtectedPolygonalRegion) {
                ProtectedPolygonalRegion poly = (ProtectedPolygonalRegion) region;
                node.setProperty("type", "poly2d");
                node.setProperty("min-y", poly.getMinimumPoint().getBlockY());
                node.setProperty("max-y", poly.getMaximumPoint().getBlockY());

                List<Map<String, Object>> points = new ArrayList<>();
                for (BlockVector2 point : poly.getPoints()) {
                    Map<String, Object> data = new HashMap<>();
                    data.put("x", point.getBlockX());
                    data.put("z", point.getBlockZ());
                    points.add(data);
                }

                node.setProperty("points", points);
            } else if (region instanceof GlobalProtectedRegion) {
                node.setProperty("type", "global");
            } else {
                node.setProperty("type", region.getClass().getCanonicalName());
            }

            node.setProperty("priority", region.getPriority());
            node.setProperty("flags", getFlagData(region));
            node.setProperty("owners", getDomainData(region.getOwners()));
            node.setProperty("members", getDomainData(region.getMembers()));

            ProtectedRegion parent = region.getParent();
            if (parent != null) {
                node.setProperty("parent", parent.getIdentifier().getLegacyQualifiedName());
            }
        }

        config.setHeader(FILE_HEADER);
        config.save();

        //noinspection ResultOfMethodCallIgnored
        file.delete();
        if (!tempFile.renameTo(file)) {
            throw new StorageException("Failed to rename temporary regions file to " + file.getAbsolutePath());
        }
    }

    @Override
    public void saveChanges(RegionDifference difference) throws DifferenceSaveException {
        throw new DifferenceSaveException("Not supported");
    }

    private Map<String, Object> getFlagData(ProtectedRegion region) {
        return FlagUtil.marshal(region.getFlags());
    }

    private Map<String, Object> getDomainData(DefaultDomain domain) {
        Map<String, Object> domainData = new HashMap<>();

        setDomainData(domainData, "players", domain.getPlayers());
        setDomainData(domainData, "unique-ids", domain.getUniqueIds());
        setDomainData(domainData, "groups", domain.getGroups());

        return domainData;
    }

    private void setDomainData(Map<String, Object> domainData, String key, Set<?> domain) {
        if (domain.isEmpty()) {
            return;
        }

        List<String> list = new ArrayList<>();

        for (Object str : domain) {
            list.add(String.valueOf(str));
        }

        domainData.put(key, list);
    }

    /**
     * Create a YAML processer instance.
     *
     * @param file the file
     * @return a processor instance
     */
    private YAMLProcessor createYamlProcessor(File file) {
        checkNotNull(file);
        return new YAMLProcessor(file, false, YAMLFormat.COMPACT);
    }
}
